name: PR Sync Check

on:
  pull_request:
    branches: [staging, main]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  sync-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Shopify CLI
        run: npm install -g @shopify/cli @shopify/theme

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions Bot"

      - name: Create Temporary Branch for Conflict Check
        id: create-temp-branch
        run: |
          # Create a temporary branch from the current PR branch
          TEMP_BRANCH="temp-conflict-check-$(date +%s)"
          git checkout -b $TEMP_BRANCH
          echo "temp_branch=$TEMP_BRANCH" >> $GITHUB_OUTPUT

          # Save the current commit hash to compare later
          echo "original_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Pull Production Theme Changes
        id: pull-production
        env:
          SHOPIFY_FLAG_STORE: ${{ secrets.PRODUCTION_STORE }}
          SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.PRODUCTION_THEME_ACCESS_PASSWORD }}
        run: |
          echo "Pulling latest theme from production..."
          shopify theme pull --live --force

          # Check if there are production theme changes
          git add -A
          if git diff --cached --quiet; then
            echo "No production theme changes to sync"
            echo "has_production_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Production theme changes detected"
            echo "has_production_changes=true" >> $GITHUB_OUTPUT
            
            # Commit production theme changes to temp branch only
            git commit -m "Temp: Production theme changes"
            
            # Get list of changed files for reporting
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            git diff --name-only HEAD~1 HEAD >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Check Merge Conflicts with Base Branch
        id: merge-check
        run: |
          echo "Fetching latest ${{ github.base_ref }} branch..."
          git fetch origin ${{ github.base_ref }}

          # Try to merge the base branch
          echo "Checking merge with origin/${{ github.base_ref }}..."
          if git merge origin/${{ github.base_ref }} --no-edit --no-ff; then
            echo "No conflicts detected with ${{ github.base_ref }}"
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected!"
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            
            # Get conflict details
            echo "conflict_files<<EOF" >> $GITHUB_OUTPUT
            git diff --name-only --diff-filter=U >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Get conflict markers for specific guidance
            echo "conflict_details<<EOF" >> $GITHUB_OUTPUT
            git diff --check || true >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup Temporary Branch
        if: always()
        run: |
          # Go back to the original PR branch
          git checkout ${{ github.head_ref }}

          # Delete the temporary branch
          git branch -D ${{ steps.create-temp-branch.outputs.temp_branch }} || true

          # Ensure we're back at the original commit
          git reset --hard ${{ steps.create-temp-branch.outputs.original_commit }}

      - name: Update PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const hasProductionChanges = '${{ steps.pull-production.outputs.has_production_changes }}' === 'true';
            const mergeSuccess = '${{ steps.merge-check.outputs.merge_success }}' === 'true';
            const hasConflicts = '${{ steps.merge-check.outputs.has_conflicts }}' === 'true';
            const targetBranch = '${{ github.base_ref }}';
            const conflictFiles = `${{ steps.merge-check.outputs.conflict_files }}`;
            const changedFiles = `${{ steps.pull-production.outputs.changed_files }}`;

            let state = 'success';
            let description = 'Ready to merge';
            let commentBody = '';

            if (hasConflicts) {
              state = 'failure';
              description = 'Merge conflicts detected';
              
              const conflictList = conflictFiles.trim().split('\n').filter(f => f).map(f => `- ${f}`).join('\n');
              const changedList = changedFiles.trim().split('\n').filter(f => f).map(f => `- ${f}`).join('\n');
              
              commentBody = '❌ **Merge Conflicts Detected**\n\n' +
                'Your PR will have conflicts when merging. These conflicts involve:\n\n';
              
              if (hasProductionChanges) {
                commentBody += '**Files changed in production theme:**\n' + changedList + '\n\n';
              }
              
              commentBody += '**Conflicting files that need resolution:**\n' + conflictList + '\n\n' +
                '**To resolve locally:**\n' +
                '```bash\n' +
                '# First, commit any pending changes\n' +
                'git add . && git commit -m "Save work"\n\n' +
                '# Pull latest production theme\n' +
                'shopify theme pull --live --force\n' +
                'git add -A && git commit -m "Sync: Production theme"\n\n' +
                '# Merge ' + targetBranch + ' branch\n' +
                'git fetch origin ' + targetBranch + '\n' +
                'git merge origin/' + targetBranch + '\n\n' +
                '# Resolve conflicts in your editor, then:\n' +
                'git add .\n' +
                'git commit -m "Resolve merge conflicts"\n' +
                'git push\n' +
                '```\n\n' +
                '⚠️ **Important:** Your feature branch changes are preserved. Resolve conflicts locally to keep your modifications.';
            } else if (hasProductionChanges) {
              state = 'warning';
              description = 'Production theme has changes - manual sync recommended';
              
              const changedList = changedFiles.trim().split('\n').filter(f => f).map(f => `- ${f}`).join('\n');
              
              commentBody = '⚠️ **Production Theme Has Changes**\n\n' +
                'No conflicts detected, but production theme has changes in these files:\n' +
                changedList + '\n\n' +
                '**Recommended:** Sync these changes to your branch before merging:\n' +
                '```bash\n' +
                'shopify theme pull --live --force\n' +
                'git add -A\n' +
                'git commit -m "Sync: Production theme changes"\n' +
                'git push\n' +
                '```\n\n' +
                'You can still merge without syncing, but you may overwrite production theme changes.';
            } else {
              description = 'Ready to merge - no conflicts';
              commentBody = '✅ **All Checks Passed**\n\n' +
                '- ✅ No conflicts with production theme\n' +
                '- ✅ No conflicts with `' + targetBranch + '` branch\n' +
                '- ✅ Ready to merge\n\n' +
                'Your changes are compatible with both production theme and the target branch.';
            }

            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state === 'warning' ? 'success' : state, // GitHub doesn't have warning state
              description: description,
              context: 'theme-sync-check'
            });

            // Add comment
            if (commentBody) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
