name: PR Theme Sync Workflow

# This workflow ensures theme synchronization between Production, Staging, and Feature branches
# It runs on every PR to staging or main branches and:
# 1. Pulls the latest production theme
# 2. Updates the target branch (staging) with production changes
# 3. Checks for conflicts and handles them appropriately
# 4. Approves PRs when ready (but doesn't auto-merge)

on:
  pull_request:
    branches: [staging, main]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  statuses: write
  issues: write

env:
  # Set to true to enable debug logging
  DEBUG: false

jobs:
  theme-sync:
    runs-on: ubuntu-latest
    name: Theme Sync Check

    steps:
      # Step 1: Setup - Checkout and Configure
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # We need the full history for proper merging
          fetch-depth: 0
          # Use a PAT to allow pushing to protected branches
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Shopify CLI
        run: npm install -g @shopify/cli @shopify/theme

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions Bot"
          git config --global merge.ours.driver true

      # Step 2: Determine PR Type and Set Variables
      - name: Analyze PR Type
        id: pr-analysis
        run: |
          echo "source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          echo "target_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

          # Determine if this is a feature->staging or staging->main PR
          if [[ "${{ github.base_ref }}" == "staging" && "${{ github.head_ref }}" != "main" ]]; then
            echo "pr_type=feature_to_staging" >> $GITHUB_OUTPUT
            echo "üìù PR Type: Feature Branch ‚Üí Staging"
          elif [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" == "staging" ]]; then
            echo "pr_type=staging_to_main" >> $GITHUB_OUTPUT
            echo "üìù PR Type: Staging ‚Üí Main"
          else
            echo "pr_type=other" >> $GITHUB_OUTPUT
            echo "üìù PR Type: Other (not handled by this workflow)"
          fi

      # Step 3: Checkout Target Branch (Staging)
      - name: Checkout Target Branch
        if: steps.pr-analysis.outputs.pr_type != 'other'
        run: |
          # For feature->staging PRs, we need to update staging
          # For staging->main PRs, we also update staging (not main)
          if [[ "${{ steps.pr-analysis.outputs.pr_type }}" == "feature_to_staging" ]] || [[ "${{ steps.pr-analysis.outputs.pr_type }}" == "staging_to_main" ]]; then
            echo "üîÑ Checking out staging branch..."
            git checkout staging
            git pull origin staging
          fi

      # Step 4: Pull Production Theme
      - name: Pull Production Theme
        id: pull-production
        if: steps.pr-analysis.outputs.pr_type != 'other'
        env:
          SHOPIFY_FLAG_STORE: ${{ secrets.PRODUCTION_STORE }}
          SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.PRODUCTION_THEME_ACCESS_PASSWORD }}
        run: |
          echo "üè™ Pulling latest theme from production..."

          # Pull the entire production theme
          shopify theme pull --live --force

          # Check if there are any changes
          git add -A
          if git diff --cached --quiet; then
            echo "‚úÖ No production theme changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "üì¶ Production theme changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Get list of changed files
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            git diff --cached --name-only >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Count changes
            echo "change_count=$(git diff --cached --numstat | wc -l)" >> $GITHUB_OUTPUT
          fi

      # Step 5: Handle Production Changes
      - name: Process Production Changes
        id: process-production
        if: steps.pr-analysis.outputs.pr_type != 'other' && steps.pull-production.outputs.has_changes == 'true'
        run: |
          echo "üîÑ Processing production theme changes..."

          # Try to commit the changes
          git commit -m "Sync: Production theme updates $(date +'%Y-%m-%d %H:%M:%S')"

          # Try to push to staging (this might fail if there are conflicts)
          if git push origin staging 2>&1 | tee push_output.txt; then
            echo "‚úÖ Successfully pushed production changes to staging"
            echo "push_success=true" >> $GITHUB_OUTPUT
            echo "needs_pr=false" >> $GITHUB_OUTPUT
          else
            # Check if push failed due to conflicts
            if grep -q "rejected" push_output.txt; then
              echo "‚ùå Push failed - conflicts detected with remote staging"
              echo "push_success=false" >> $GITHUB_OUTPUT
              echo "needs_pr=true" >> $GITHUB_OUTPUT
              
              # We'll need to create a PR for these changes
              echo "üìù Will create a PR for production sync"
            fi
          fi

      # Step 6: Create Sync PR if Needed
      - name: Create Production Sync PR
        id: create-sync-pr
        if: steps.process-production.outputs.needs_pr == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = new Date().toISOString().slice(0, 16).replace('T', ' ');
            const branchName = `sync-production-${Date.now()}`;

            // Create a new branch for the sync
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: context.sha
            });

            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Sync: Production theme updates - ${timestamp}`,
              body: `## Production Theme Sync Required\n\n` +
                    `This PR contains theme changes from production that need to be merged into staging.\n\n` +
                    `### Changed Files\n` +
                    `\`\`\`\n${{ steps.pull-production.outputs.changed_files }}\`\`\`\n\n` +
                    `### Next Steps\n` +
                    `1. Review the production changes\n` +
                    `2. Resolve any conflicts if present\n` +
                    `3. Merge this PR into staging\n` +
                    `4. Then retry your original PR\n\n` +
                    `‚ö†Ô∏è **Important**: Your original PR (#${{ steps.pr-analysis.outputs.pr_number }}) is blocked until this sync is complete.`,
              head: branchName,
              base: 'staging'
            });

            core.setOutput('sync_pr_number', pr.number);
            core.setOutput('sync_pr_url', pr.html_url);

      # Step 7: Check Feature Branch Conflicts (only for feature->staging)
      - name: Check Feature Branch Merge Conflicts
        id: check-feature-conflicts
        if: steps.pr-analysis.outputs.pr_type == 'feature_to_staging' && steps.process-production.outputs.needs_pr != 'true'
        run: |
          echo "üîç Checking for conflicts between feature branch and updated staging..."

          # Fetch the feature branch
          git fetch origin ${{ steps.pr-analysis.outputs.source_branch }}

          # Try to merge the feature branch into staging (dry run)
          if git merge --no-commit --no-ff origin/${{ steps.pr-analysis.outputs.source_branch }}; then
            echo "‚úÖ No conflicts detected between feature and staging"
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
            # Abort the merge since this was just a test
            git merge --abort
          else
            echo "‚ùå Conflicts detected between feature and staging"
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            
            # Get conflict details
            echo "conflict_files<<EOF" >> $GITHUB_OUTPUT
            git diff --name-only --diff-filter=U >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Abort the merge
            git merge --abort || true
          fi

      # Step 8: Update PR Status and Comment
      - name: Update PR Status
        if: always() && steps.pr-analysis.outputs.pr_type != 'other'
        uses: actions/github-script@v7
        with:
          script: |
            const prType = '${{ steps.pr-analysis.outputs.pr_type }}';
            const hasProductionChanges = '${{ steps.pull-production.outputs.has_changes }}' === 'true';
            const productionSyncNeeded = '${{ steps.process-production.outputs.needs_pr }}' === 'true';
            const hasFeatureConflicts = '${{ steps.check-feature-conflicts.outputs.has_conflicts }}' === 'true';
            const syncPrNumber = '${{ steps.create-sync-pr.outputs.sync_pr_number }}';
            const syncPrUrl = '${{ steps.create-sync-pr.outputs.sync_pr_url }}';

            let state = 'success';
            let description = '';
            let commentBody = '';

            // Determine status based on workflow results
            if (productionSyncNeeded) {
              state = 'failure';
              description = 'Production sync required';
              commentBody = `‚ùå **Production Sync Required**\n\n` +
                `A separate PR has been created to sync production theme changes: #${syncPrNumber}\n\n` +
                `**Next Steps:**\n` +
                `1. Review and merge the [sync PR](${syncPrUrl})\n` +
                `2. Once merged, re-run the checks on this PR\n\n` +
                `This PR is blocked until the production sync is complete.`;
            } else if (hasFeatureConflicts && prType === 'feature_to_staging') {
              state = 'failure';
              description = 'Merge conflicts detected';
              commentBody = `‚ùå **Merge Conflicts Detected**\n\n` +
                `Your feature branch has conflicts with the staging branch.\n\n` +
                `**Conflicting files:**\n` +
                `\`\`\`\n${{ steps.check-feature-conflicts.outputs.conflict_files }}\`\`\`\n\n` +
                `**To resolve:**\n` +
                `\`\`\`bash\n` +
                `# Update your feature branch\n` +
                `git checkout ${{ steps.pr-analysis.outputs.source_branch }}\n` +
                `git pull origin staging\n` +
                `# Resolve conflicts in your editor\n` +
                `git add .\n` +
                `git commit -m "Resolve merge conflicts with staging"\n` +
                `git push\n` +
                `\`\`\``;
            } else if (hasProductionChanges) {
              state = 'success';
              description = 'Ready to merge (production synced)';
              commentBody = `‚úÖ **Ready to Merge**\n\n` +
                `Production theme changes have been successfully synced to staging.\n\n` +
                `**Synced files:**\n` +
                `\`\`\`\n${{ steps.pull-production.outputs.changed_files }}\`\`\`\n\n` +
                `Your PR has been approved and is ready to merge.`;
            } else {
              state = 'success';
              description = 'Ready to merge';
              commentBody = `‚úÖ **All Checks Passed**\n\n` +
                `- ‚úÖ No production theme changes needed\n` +
                `- ‚úÖ No merge conflicts detected\n` +
                `- ‚úÖ Ready to merge\n\n` +
                `Your PR has been approved.`;
            }

            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'theme-sync-check'
            });

            // Add comment to PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-analysis.outputs.pr_number }},
              body: commentBody
            });

            // Approve PR if everything is good
            if (state === 'success') {
              try {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: ${{ steps.pr-analysis.outputs.pr_number }},
                  event: 'APPROVE',
                  body: 'Automated approval: All theme sync checks passed.'
                });
              } catch (error) {
                console.log('Could not auto-approve (might be PR author):', error.message);
              }
            }

      # Step 9: Summary Output
      - name: Workflow Summary
        if: always()
        run: |
          echo "## üìä Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Type**: ${{ steps.pr-analysis.outputs.pr_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Branch**: ${{ steps.pr-analysis.outputs.source_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch**: ${{ steps.pr-analysis.outputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Changes**: ${{ steps.pull-production.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.pull-production.outputs.has_changes }}" == "true" ]]; then
            echo "- **Changed Files**: ${{ steps.pull-production.outputs.change_count }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ steps.process-production.outputs.needs_pr }}" == "true" ]]; then
            echo "- **Sync PR Created**: #${{ steps.create-sync-pr.outputs.sync_pr_number }}" >> $GITHUB_STEP_SUMMARY
          fi
