name: PR Branch Sync Workflow

# This workflow ensures branch synchronization between Main and Staging branches
# It runs on every PR to staging or main branches and:
# 1. Ensures staging is up-to-date with main
# 2. Syncs media files (images & videos) from production to staging (avoiding duplicates)
# 3. Checks for conflicts and handles them appropriately
# 4. Approves PRs when ready (but doesn't auto-merge)

on:
  pull_request:
    branches: [staging, main]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  statuses: write
  issues: write

jobs:
  branch-sync:
    runs-on: ubuntu-latest
    name: Branch Sync Check

    steps:
      # Step 1: Setup - Checkout and Configure
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # We need the full history for proper merging
          fetch-depth: 0
          # Use GITHUB_TOKEN to allow pushing to branches
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions Bot"

      # Step 2: Determine PR Type and Set Variables
      - name: Analyze PR Type
        id: pr-analysis
        run: |
          echo "source_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          echo "target_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

          # Determine if this is a feature->staging or staging->main PR
          if [[ "${{ github.base_ref }}" == "staging" && "${{ github.head_ref }}" != "main" ]]; then
            echo "pr_type=feature_to_staging" >> $GITHUB_OUTPUT
            echo "üìù PR Type: Feature Branch ‚Üí Staging"
          elif [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" == "staging" ]]; then
            echo "pr_type=staging_to_main" >> $GITHUB_OUTPUT
            echo "üìù PR Type: Staging ‚Üí Main"
          else
            echo "pr_type=other" >> $GITHUB_OUTPUT
            echo "üìù PR Type: Other (not handled by this workflow)"
          fi

      # Step 3: Fetch all branches
      - name: Fetch branches
        if: steps.pr-analysis.outputs.pr_type != 'other'
        run: |
          echo "üîÑ Fetching latest branches..."
          git fetch origin main:main
          git fetch origin staging:staging
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}

      # Step 4: Checkout and update staging branch
      - name: Update Staging Branch
        id: update-staging
        if: steps.pr-analysis.outputs.pr_type != 'other'
        run: |
          echo "üîÑ Checking out staging branch..."
          git checkout staging

          # Check if staging needs updates from main
          echo "üìä Checking if staging is behind main..."
          BEHIND_COUNT=$(git rev-list --count staging..main)

          if [ "$BEHIND_COUNT" -eq 0 ]; then
            echo "‚úÖ Staging is already up-to-date with main"
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
          else
            echo "üì¶ Staging is $BEHIND_COUNT commits behind main"
            echo "needs_update=true" >> $GITHUB_OUTPUT
            
            # Try to merge main into staging
            echo "üîÑ Attempting to merge main into staging..."
            if git merge main --no-edit; then
              echo "‚úÖ Successfully merged main into staging"
              echo "has_conflicts=false" >> $GITHUB_OUTPUT
              
              # Push the updated staging branch
              if git push origin staging; then
                echo "‚úÖ Successfully pushed updates to staging"
                echo "push_success=true" >> $GITHUB_OUTPUT
              else
                echo "‚ùå Failed to push to staging"
                echo "push_success=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ùå Merge conflicts detected"
              echo "has_conflicts=true" >> $GITHUB_OUTPUT
              
              # Get conflict details
              echo "conflict_files<<EOF" >> $GITHUB_OUTPUT
              git diff --name-only --diff-filter=U >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              
              # Abort the merge
              git merge --abort
            fi
          fi

      # Step 5: Setup Node.js for media sync
      - name: Setup Node.js
        if: steps.pr-analysis.outputs.pr_type == 'feature_to_staging' && steps.update-staging.outputs.has_conflicts != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Step 6: Sync Media Files from Production to Staging
      - name: Sync Media Files
        id: sync-media
        if: steps.pr-analysis.outputs.pr_type == 'feature_to_staging' && steps.update-staging.outputs.has_conflicts != 'true'
        env:
          SOURCE_STORE: ${{ secrets.PRODUCTION_STORE }}
          SOURCE_ACCESS_TOKEN: ${{ secrets.PRODUCTION_ADMIN_API_TOKEN }}
          TARGET_STORE: ${{ secrets.SHOPIFY_FLAG_STORE }}
          TARGET_ACCESS_TOKEN: ${{ secrets.STAGING_ADMIN_API_TOKEN }}
        run: |
          echo "üé¨ Starting media sync from production to staging..."
          cd scripts
          node sync-images-check.js

      # Step 7: Check PR merge conflicts (for feature->staging)
      - name: Check Feature Branch Conflicts
        id: check-feature-conflicts
        if: steps.pr-analysis.outputs.pr_type == 'feature_to_staging' && steps.update-staging.outputs.has_conflicts != 'true'
        run: |
          echo "üîç Checking for conflicts between feature branch and staging..."

          # Make sure we're on staging
          git checkout staging

          # Try to merge the feature branch (dry run)
          if git merge --no-commit --no-ff ${{ github.head_ref }}; then
            echo "‚úÖ No conflicts detected between feature and staging"
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
            # Abort the merge since this was just a test
            git merge --abort
          else
            echo "‚ùå Conflicts detected between feature and staging"
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            
            # Get conflict details
            echo "conflict_files<<EOF" >> $GITHUB_OUTPUT
            git diff --name-only --diff-filter=U >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Abort the merge
            git merge --abort || true
          fi

      # Step 8: Update PR Status and Comment
      - name: Update PR Status
        if: always() && steps.pr-analysis.outputs.pr_type != 'other'
        uses: actions/github-script@v7
        with:
          script: |
            const prType = '${{ steps.pr-analysis.outputs.pr_type }}';
            const needsUpdate = '${{ steps.update-staging.outputs.needs_update }}' === 'true';
            const hasStagingConflicts = '${{ steps.update-staging.outputs.has_conflicts }}' === 'true';
            const hasFeatureConflicts = '${{ steps.check-feature-conflicts.outputs.has_conflicts }}' === 'true';
            const pushSuccess = '${{ steps.update-staging.outputs.push_success }}' === 'true';

            // Media sync results
            const mediaSyncRun = '${{ steps.sync-media.outcome }}' === 'success';
            const syncedCount = '${{ steps.sync-media.outputs.synced_count }}' || '0';
            const skippedCount = '${{ steps.sync-media.outputs.skipped_count }}' || '0';
            const failedCount = '${{ steps.sync-media.outputs.failed_count }}' || '0';
            const syncedImages = '${{ steps.sync-media.outputs.synced_images }}' || '0';
            const syncedVideos = '${{ steps.sync-media.outputs.synced_videos }}' || '0';

            let state = 'success';
            let description = '';
            let commentBody = '';

            // Determine status based on workflow results
            if (hasStagingConflicts) {
              state = 'failure';
              description = 'Staging has conflicts with main';
              commentBody = `‚ùå **Manual Intervention Required**\n\n` +
                `The staging branch has merge conflicts with main that must be resolved manually.\n\n` +
                `**Conflicting files:**\n` +
                `\`\`\`\n${{ steps.update-staging.outputs.conflict_files }}\`\`\`\n\n` +
                `**To resolve:**\n` +
                `\`\`\`bash\n` +
                `# Checkout staging branch\n` +
                `git checkout staging\n` +
                `git pull origin staging\n` +
                `git pull origin main\n` +
                `# Resolve conflicts in your editor\n` +
                `git add .\n` +
                `git commit -m "Resolve merge conflicts with main"\n` +
                `git push origin staging\n` +
                `\`\`\`\n\n` +
                `After resolving conflicts, re-run the workflow on this PR.`;
            } else if (hasFeatureConflicts && prType === 'feature_to_staging') {
              state = 'failure';
              description = 'Feature branch has conflicts with staging';
              commentBody = `‚ùå **Merge Conflicts Detected**\n\n` +
                `Your feature branch has conflicts with the updated staging branch.\n\n` +
                `**Conflicting files:**\n` +
                `\`\`\`\n${{ steps.check-feature-conflicts.outputs.conflict_files }}\`\`\`\n\n` +
                `**To resolve:**\n` +
                `\`\`\`bash\n` +
                `# Update your feature branch\n` +
                `git checkout ${{ steps.pr-analysis.outputs.source_branch }}\n` +
                `git pull origin staging\n` +
                `# Resolve conflicts in your editor\n` +
                `git add .\n` +
                `git commit -m "Resolve merge conflicts with staging"\n` +
                `git push\n` +
                `\`\`\``;
            } else if (needsUpdate && pushSuccess) {
              state = 'success';
              description = 'Ready to merge (staging updated)';
              
              let mediaSyncInfo = '';
              if (prType === 'feature_to_staging' && mediaSyncRun) {
                mediaSyncInfo = `\n\n**üé¨ Media Sync Results:**\n` +
                  `- ‚úÖ Total synced: ${syncedCount} files\n` +
                  `  - üñºÔ∏è Images: ${syncedImages}\n` +
                  `  - üé¨ Videos: ${syncedVideos}\n` +
                  `- ‚è≠Ô∏è Skipped (already exist): ${skippedCount} files\n` +
                  `- ‚ùå Failed: ${failedCount} files`;
              }
              
              commentBody = `‚úÖ **Ready to Merge**\n\n` +
                `The staging branch has been successfully updated with the latest changes from main.\n\n` +
                `- ‚úÖ Staging synchronized with main\n` +
                `- ‚úÖ No merge conflicts detected\n` +
                `- ‚úÖ PR approved${mediaSyncInfo}\n\n` +
                `This PR is ready to be merged when you're ready.`;
            } else if (!needsUpdate) {
              state = 'success';
              description = 'Ready to merge (already up-to-date)';
              
              let mediaSyncInfo = '';
              if (prType === 'feature_to_staging' && mediaSyncRun) {
                mediaSyncInfo = `\n\n**üé¨ Media Sync Results:**\n` +
                  `- ‚úÖ Total synced: ${syncedCount} files\n` +
                  `  - üñºÔ∏è Images: ${syncedImages}\n` +
                  `  - üé¨ Videos: ${syncedVideos}\n` +
                  `- ‚è≠Ô∏è Skipped (already exist): ${skippedCount} files\n` +
                  `- ‚ùå Failed: ${failedCount} files`;
              }
              
              commentBody = `‚úÖ **Ready to Merge**\n\n` +
                `The staging branch is already up-to-date with main.\n\n` +
                `- ‚úÖ No synchronization needed\n` +
                `- ‚úÖ No merge conflicts detected\n` +
                `- ‚úÖ PR approved${mediaSyncInfo}\n\n` +
                `This PR is ready to be merged when you're ready.`;
            } else {
              state = 'failure';
              description = 'Failed to update staging';
              commentBody = `‚ùå **Update Failed**\n\n` +
                `Failed to push updates to the staging branch. Please check branch protection rules or permissions.`;
            }

            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'branch-sync-check'
            });

            // Find existing bot comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-analysis.outputs.pr_number }}
            });

            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Branch Sync Check')
            );

            commentBody = `## üîÑ Branch Sync Check\n\n${commentBody}`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.pr-analysis.outputs.pr_number }},
                body: commentBody
              });
            }

            // Approve PR if everything is good
            if (state === 'success') {
              try {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: ${{ steps.pr-analysis.outputs.pr_number }},
                  event: 'APPROVE',
                  body: 'Automated approval: All branch sync checks passed.'
                });
              } catch (error) {
                console.log('Could not auto-approve (might be PR author):', error.message);
              }
            }

      # Step 9: Summary Output
      - name: Workflow Summary
        if: always()
        run: |
          echo "## üìä Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Type**: ${{ steps.pr-analysis.outputs.pr_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Branch**: ${{ steps.pr-analysis.outputs.source_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch**: ${{ steps.pr-analysis.outputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging needed update**: ${{ steps.update-staging.outputs.needs_update }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Conflicts detected**: ${{ steps.update-staging.outputs.has_conflicts || steps.check-feature-conflicts.outputs.has_conflicts }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.pr-analysis.outputs.pr_type }}" == "feature_to_staging" ]] && [[ "${{ steps.sync-media.outcome }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üé¨ Media Sync Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Total synced**: ${{ steps.sync-media.outputs.synced_count }} files" >> $GITHUB_STEP_SUMMARY
            echo "  - üñºÔ∏è **Images**: ${{ steps.sync-media.outputs.synced_images }}" >> $GITHUB_STEP_SUMMARY
            echo "  - üé¨ **Videos**: ${{ steps.sync-media.outputs.synced_videos }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Skipped**: ${{ steps.sync-media.outputs.skipped_count }} files (already exist)" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: ${{ steps.sync-media.outputs.failed_count }} files" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ steps.update-staging.outputs.has_conflicts }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ö†Ô∏è Action Required" >> $GITHUB_STEP_SUMMARY
            echo "Manual conflict resolution needed in staging branch" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.check-feature-conflicts.outputs.has_conflicts }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ö†Ô∏è Action Required" >> $GITHUB_STEP_SUMMARY
            echo "Manual conflict resolution needed in feature branch" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Ready to Merge" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed. PR can be merged when ready." >> $GITHUB_STEP_SUMMARY
          fi
