name: PR Sync Check

on:
  pull_request:
    branches: [staging, main]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  sync-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Shopify CLI
        run: npm install -g @shopify/cli @shopify/theme

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions Bot"

      - name: Pull Production Theme Changes
        id: pull-production
        env:
          SHOPIFY_FLAG_STORE: ${{ secrets.PRODUCTION_STORE }}
          SHOPIFY_CLI_THEME_TOKEN: ${{ secrets.PRODUCTION_THEME_ACCESS_PASSWORD }}
        run: |
          echo "Pulling latest theme from production..."
          shopify theme pull --live --force

          # Check if there are production theme changes
          git add -A
          if git diff --cached --quiet; then
            echo "No production theme changes to sync"
            echo "has_production_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Production theme changes detected"
            echo "has_production_changes=true" >> $GITHUB_OUTPUT
            
            # Commit production theme changes
            git commit -m "Sync: Latest theme changes from production - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            echo "production_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Merge Base Branch and Check Conflicts
        id: merge-check
        run: |
          echo "Fetching latest ${{ github.base_ref }} branch..."
          git fetch origin ${{ github.base_ref }}

          # First, try to merge the base branch
          echo "Attempting to merge origin/${{ github.base_ref }} into current branch..."
          if git merge origin/${{ github.base_ref }} --no-edit --no-ff; then
            echo "Successfully merged ${{ github.base_ref }} into PR branch"
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected!"
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            
            # Get conflict details
            echo "conflict_files<<EOF" >> $GITHUB_OUTPUT
            git diff --name-only --diff-filter=U >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Push Changes if Successful
        if: steps.merge-check.outputs.merge_success == 'true' && steps.pull-production.outputs.has_production_changes == 'true'
        id: push-changes
        run: |
          if git push origin ${{ github.head_ref }}; then
            echo "Successfully pushed production theme changes"
            echo "push_success=true" >> $GITHUB_OUTPUT
          else
            echo "Failed to push changes"
            echo "push_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Update PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const hasProductionChanges = '${{ steps.pull-production.outputs.has_production_changes }}' === 'true';
            const mergeSuccess = '${{ steps.merge-check.outputs.merge_success }}' === 'true';
            const hasConflicts = '${{ steps.merge-check.outputs.has_conflicts }}' === 'true';
            const pushSuccess = '${{ steps.push-changes.outputs.push_success }}' === 'true';
            const targetBranch = '${{ github.base_ref }}';
            const conflictFiles = `${{ steps.merge-check.outputs.conflict_files }}`;

            let state = 'success';
            let description = 'Ready to merge';
            let commentBody = '';

            if (hasConflicts) {
              state = 'failure';
              description = 'Merge conflicts detected';
              
              const conflictList = conflictFiles.trim().split('\n').filter(f => f).map(f => `- ${f}`).join('\n');
              
              commentBody = '❌ **Merge Conflicts Detected**\n\n' +
                'This PR has conflicts after syncing with production theme and merging `' + targetBranch + '` branch.\n\n' +
                '**Conflicting files:**\n' + conflictList + '\n\n' +
                '**To resolve:**\n' +
                '```bash\n' +
                '# Pull latest production theme\n' +
                'shopify theme pull --live --force\n' +
                'git add -A && git commit -m "Sync: Production theme"\n\n' +
                '# Merge ' + targetBranch + ' branch\n' +
                'git fetch origin ' + targetBranch + '\n' +
                'git merge origin/' + targetBranch + '\n\n' +
                '# Resolve conflicts manually, then:\n' +
                'git add .\n' +
                'git commit -m "Resolve merge conflicts"\n' +
                'git push\n' +
                '```';
            } else if (hasProductionChanges && pushSuccess) {
              description = 'Ready to merge (production theme synced)';
              commentBody = '✅ **Production Theme Synced - Ready to Merge**\n\n' +
                'This PR has been automatically updated with:\n' +
                '1. ✅ Latest theme changes from production\n' +
                '2. ✅ Latest changes from `' + targetBranch + '` branch\n\n' +
                '**No conflicts detected.** This PR is approved and ready to merge.';
            } else if (hasProductionChanges && !pushSuccess) {
              state = 'failure';
              description = 'Failed to push synced changes';
              commentBody = '❌ **Push Failed**\n\n' +
                'Successfully synced with production theme and merged ' + targetBranch + ', but failed to push changes.\n\n' +
                'Please pull the latest changes and push manually:\n' +
                '```bash\n' +
                'git pull origin ${{ github.head_ref }}\n' +
                'git push\n' +
                '```';
            } else if (!hasProductionChanges && mergeSuccess) {
              description = 'Ready to merge';
              commentBody = '✅ **All Checks Passed - Ready to Merge**\n\n' +
                '- ✅ No production theme changes detected\n' +
                '- ✅ Successfully validated merge with `' + targetBranch + '` branch\n' +
                '- ✅ No conflicts found\n\n' +
                'This PR is approved and ready to merge.';
            }

            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'theme-sync-check'
            });

            // Add comment
            if (commentBody) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
